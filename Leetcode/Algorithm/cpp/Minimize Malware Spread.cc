class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph_, vector<int>& initial) {
        graph = graph_;
        n = graph.size();
        count = vector<int>(n, 0);
        peer = vector<int>(n, 0);
        
        sort(initial.begin(), initial.end());
        
        visited = vector<bool>(n, false);
        for (auto cur: initial) {
            peer[cur] = dfs1(cur);
        }
        
        int maxi = -1;
        int ans = -1;
        
        visited = vector<bool>(n, false);
        for (auto cur: initial) {
            if (peer[cur] < maxi) {
                continue;
            }
            int red = dfs2(cur);
            
            if (red > maxi) {
                maxi = red;
                ans = cur;
            }
        }
        
        return ans;
    }
private:
    int dfs1(int cur) {
        if (visited[cur]) {
            return 0;
        }
        visited[cur] = true;
        count[cur]++;
        int res = 1;
        
        for (int i = 0; i < n; i++) {
            if (graph[cur][i]) {
                res += dfs1(i);
            }
        }
        return res;
    }
    
    int dfs2(int cur) {
        if (visited[cur]) {
            return 0;
        }
        visited[cur] = true;
        int res = 0;
        
        if (count[cur] == 1) {
            res++;
        }
        
        for (int i = 0; i < n; i++) {
            if (graph[cur][i]) {
                res += dfs2(i);
            }
        }
        return res;
    }
private:
    int n;
    vector<bool> visited;
    vector<int> count;
    vector<int> peer;
    vector<vector<int> > graph;
};
